#This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions


#name of Pipeline
name: "EB Pipeline"

on:
  push:
     branches: [ main ]
  pull_request:


permissions:
  id-token: write
  contents: read
  
jobs:
  # terraform:
  #   name: "Terraform"
  #   runs-on: ubuntu-latest
  #   steps:  
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         # terraform_version: 0.13.0:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform Format
  #       id: fmt
  #       run: terraform fmt -check

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
      
  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     - name: Update Pull Request
  #       uses: actions/github-script@0.9.0
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

  #           <details><summary>Show Plan</summary>

  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           \`\`\`

  #           </details>

  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #       run: terraform apply -auto-approve   


  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Node V
        uses: actions/setup-node@v2
        with:   
          node-version: '14'
        


      - name: Create ZIP deployment package
        run: | 

          npm ci
          zip -r deploy.zip . -x '*.git*'
     
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: "us-east-2"
      
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.SECRET_ACCESS_KEY }}
          application_name: "crud_app"
          environment_name: crud-env
          version_label: "ver-${{ github.sha }}"
          region: "us-east-2"
          deployment_package: deploy.zip

    # - name: Upload package to S3 bucket
    #   run: aws s3 cp deploy_package.zip s3://crud-app/

    # - name: Create new ElasticBeanstalk Application Version
    #   run: |
    #     aws elasticbeanstalk create-application-version \
    #     --application-name CrudApp \
    #     --source-bundle S3Bucket="crud-app",S3Key="deploy.zip" \          
    #     --version-label "ver-${{ github.sha }}" \
    #     --description "commit-sha-${{ github.sha }}"

    # - name: Deploy new ElasticBeanstalk Application Version
    #   run: aws elasticbeanstalk update-environment --environment-name CrudApp-env-1 --version-label "ver-${{ github.sha }}"

    #
    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v2
    #   with:
    #     node-version: ${{ matrix.node-version }}
    #     cache: 'npm'
    # - run: npm ci
    # - run: npm run build --if-present
    ##- run: npm test
    
    # - name: Generate deployment package
    #   run: zip -r deploy.zip * -x "**node_modules**"
    
  # create_eb_version:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Deploy to EBS
  #       uses: einaregilsson/beanstalk-deploy@v10
  #       with:
  #         aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
  #         aws_secret_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  #         application_name: "crud-app"
  #         aws_region: "us-east-1"
  #         deployment_package: deploy.zip 

  #     - name: Deployed!
  #         run: echo App deployed to ELB







  # create_eb_version:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Configure AWS credentials 
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #   #- name: Deploy to Elastic Beanstalk
  #   - uses: hmanzur/actions-aws-eb@v1.0.0
  #     with:
  #       command: 'deploy ${{ secrets.ENVIRONMENT_NAME }}'
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       AWS_DEFAULT_REGION: "us-east-1"
  
#   deploy_aws:
#     needs: [build]
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#     - name: Set up Python 3.6 (needed for eb cli)
#       uses: actions/setup-python@v1
#       with:
#         python-version: "3.6"
#     - name: "Configure AWS credentials" 
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#           #aws-id: ${{ secrets.AWS_ID }}
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           #aws-region: "us-east-1"
#     - run: |
# # AWS_VERSION_LABEL=${{env.APP_NAME}}-${{env.PIPELINE_ID}}

#         echo "Installing Elastic Beanstalk Cli"
#         python -m pip install --upgrade pip
#         pip install awsebcli --upgrade
#       #  eb --version

#           echo "Deploy init"
#           eb init 
#       # -i ${{env.APP_NAME}} -p ${{env.AWS_PLATFORM}} -k ${{secrets.AWS_ID}} --region ${{env.AWS_REGION}}
#           eb deploy 
#       # ${{env.APP_NAME}} --version ${AWS_VERSION_LABEL}
#           echo "Deploy finished"
